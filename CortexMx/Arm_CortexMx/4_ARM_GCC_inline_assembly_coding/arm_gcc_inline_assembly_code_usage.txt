arm gcc inline assembly code usage
*inline assembly code is used to write pure assembly code inside a 'C'
*GCC inline assembly code syntax as shown below
Ex: Assembly instruction: MOV R0,R1
inline assembly statement: __asm volatile("MOV R0,R1");
*general form of an inline assembler statement:
__asm volatile(code : output_operand_list : input_operand_list : clobber_list);
	- volatile: attribute to the asm statement to instruct the compiler not to optimize the assember code
	- code: Assembly mnemonic defined as a single string
	- output_operand_list: A list of output operands, separated by commas
	- input_operand_list: A list of input operands, separated by commas
	- clobber_list: mainly used to tell the compiler about modifications done by the assembler code

*input/output operands and Constraint string
Each input and output operand is described by a constraint string followed by a C expression in parentheses
Input/Output operand format: "<Constraint string>"(<'C' expression>) - Constraint_string = constraint_character + constraint_modifier
Ex1: Move the content of 'C' variable 'val' to ARM register R0
Instruction 	: MOV
Source		: a 'C' variable 'val'(Input)
Destination	: R0(ARM core register)
__asm volatile("MOV R0,%0": : "r"(val));
	- %0 refers to the first operand, %1 refers to the second and so forth
	- Constraint string 'r' is a constraint character
	- val is 'C' variable
Ex2: Move the content of CONTROL register to 'C' variable "control_reg"
CONTROL register is a special register of the ARM core
to read CONTROL register you have to use MRS instruction
Instruction 	: MRS
Source		: CONTROL
Destination	: A 'C' variable "control_reg"(OUTPUT operand)
uint32_t control_reg;
__asm volatile("MRS %0,CONTROL":"=r"(control_reg)::);

Ex3: Copy the content of 'C' variablr var1 to var2
Instruction 	: MOV
Source		: a 'C' variable 'val1'(Input)
Destination	: a 'C' variable 'val2'(Output)
__asm volatile("MOV %0,%1": : "=r"(val1) "r"(val2));

Ex4: Copy the content of a pointer into another variable
int p1, *ptr;
ptr = (int *)0x2000008;
__asm volatile("LDR %0, [%1]" : "=r"(p1): "r"(ptr)); // p1 = *ptr;
