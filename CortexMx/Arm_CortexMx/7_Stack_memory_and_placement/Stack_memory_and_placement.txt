Ram architecture <img : 7_Ram_Architecture>
Ram_Start :| Part_of_RAM_reserved_of_global_data | Part_of_RAM_reserved_for_Heap | Part_of_RAM_reseved_for_Stack |: Ram_End
- Part_of_RAM_reserved_of_global_data: will be utilized when the program contains global data and static local variables. Even you can store instructions here and execute it.
- Part_of_RAM_reserved_for_Heap: will be utilized during dynamic memory allocation.
- Part_of_RAM_reseved_for_Stack: will be utilized during function call to save temporary data, Temporary storage of local variables of the function, temporary storage of stack frames during interrupts and exceptions.

Stack memory
- Stack memory is part of the main memory(internal Ram of external Ram) reserved for the temporary storage of data (transient data)
- Mainly used during function, interrupt/exception handling 
- Stack memory is accessed in last in first out (LIFO)
- The stack can be accessed using PUSH and POP instruction or using any memory manipulation instruction (LD,STR)
- the stack is traced using a stack pointer(SP) register. PUSH and POP instructions affect(decrement or increment)stack pointer register(SP)

Stack memory uses
- the temporary storage of processor register values
- the temporary storage of local variables of the function
- During system exception or interrupt, stack memory will be used save the context(some general-purpose register, processor staturs register, return address) of the currently executing code

Stack operation model <img = 7_Stack_models_operation>
- Full Ascending stack
- Full Descending stack 
- Empty Ascending stack
- Empty Descending stack
-> In ARM Cortex Mx processor stack consumption model is Full Descending (FD) 
 
Banked Stack Pointers
1. Cortex M Processor physically has 3 stack pointers SP(R13), MSP and PSP
- MSP: Main stack pointer
- PSP: Processor stack pointer
SP is called as current stack pointer
2. after processor reset, by default, MSP will be selected as current stack pointer. That means, SP copies the contents of MSP
3. Thread mode can change the current stack pointer to PSP by configuring the CONTROL register's SPSEL bit.
4. Handler mode code execution will always use MSP as the current stack pointer. That also means that, changing the value of SPSEL bit being in the handler mode doesn't make any sense. Thee write will be ignored.
5. MSP will be initialized automatically by the processor after reset by reading the content of the address 0x00000000
6. If you want to use the PSP then make sure that you initialize the PSP to vali stack address in your code

Procedure Call Standard for the Arm Architecture (AAPCS)
The AAPCS standard describes procedure call standard used by the application binary interface(AB1) for Arm architecture
Scope
the AAPCS define subroutines can be separately written, separately compiled, and separately assembled to work together. it describes a contract between a calling routine and a called routine that defines:
	- Obligations on the caller to create a program state in which the called routine may start to execute
	- obligations on the called routine to preserve the program state of the caller across the call
	- The rights of the called routine to alter the program state of its caller  

Stack activities during interrupt and exception
- to allow a 'C' function to be used as an exception/interrupt handler, the exception mechanism needs to save R0 to R1, R12,Lr and XPSR at exception entrance automatically and restore them at exception exit under control of the processor hardware
- in this way, when return to the interrupted program, all the register would have the same value as when the interrupt entry sequence started

Stack initialization tips
1, Evaluated your targeted application. Decide the amount of stack that would be needed for the worst-case scenario of your application run time 
2, know your processor's stack consumption model (FD, FA, ED, EA)
3, Decide stack placement in the RAM (middle, end, external memory)
4, in many applications, there may be second stage stack init. For example, if you want to allocate stack in external SDRAM the first start with internal RAM, in the main or startup code initialize the SDRAM then change the stack pointer to point to SDRAM
5, if you are using the ARM cortex Mx processor, make sure that the first location of vector table contains the initial stack address(MSP). then startup code of the project usually does this
6, you may also use the linker script to decide the stack, heap, and other RAM area boundaries. Startup code usually fetches boundary information from linker scripts.
7, in an RTOS scenario, the kernel code may use MSP to trace its own stack and configure PSP for user task's stack
